services:
  app:
    build:
      context: docker-compose/app
      dockerfile: Dockerfile
    image: keystone.guru
    container_name: keystone.guru-app
    depends_on:
      - db
      - db-combatlog
      - redis
    restart: no
    working_dir: /var/www/
    volumes:
      - ./:/var/www
      - ../keystone.guru.assets:/var/keystone.guru.assets
      - ~/.ssh:/root/.ssh
    networks:
      - keystone.guru

  app-assets:
    image: nginx:1.27-alpine
    container_name: keystone.guru-app-assets
    restart: no
    volumes:
      # static files go straight into Nginxâ€™s html dir (read-only is safest)
      - ../keystone.guru.assets:/usr/share/nginx/html:ro
    networks:
      - keystone.guru
    ports:
      - "8009:80"

  app-swoole:
    build:
      context: docker-compose/app
      dockerfile: Dockerfile
    image: keystone.guru-swoole
    container_name: keystone.guru-app-swoole
    depends_on:
      - app
      - db
      - db-combatlog
      - redis
    restart: no
    working_dir: /var/www/
    command: php /var/www/artisan octane:start --host=0.0.0.0 --port=9501 --workers=1 --task-workers=1
    volumes:
      - ./:/var/www
      - ~/.ssh:/root/.ssh
    networks:
      - keystone.guru
    ports:
      - "9501:9501"

  cron:
    build:
      context: docker-compose/cron
      dockerfile: Dockerfile
    image: keystone.guru-cron
    container_name: keystone.guru-cron
    depends_on:
      - db
      - db-combatlog
      - redis
    restart: no
    working_dir: /var/www/
    volumes:
      - ./:/var/www
      - ~/.ssh:/root/.ssh
    networks:
      - keystone.guru


  horizon:
    build:
      context: docker-compose/app
      dockerfile: Dockerfile
    image: keystone.guru
    container_name: keystone.guru-horizon
    depends_on:
      - db
      - db-combatlog
      - redis
    restart: no
    working_dir: /var/www/
    entrypoint: /usr/local/bin/php artisan horizon
    volumes:
      - ./:/var/www
    networks:
      - keystone.guru
    environment:
      - "APP_URL=http://nginx"

  laravel-echo-server:
    build:
      context: docker-compose/laravel-echo-server
      dockerfile: Dockerfile
    image: laravel-echo-server
    container_name: keystone.guru-laravel-echo-server
    depends_on:
      - redis
    restart: no
    ports:
      - "6001:6001"
    volumes:
      - ./:/app
    networks:
      - keystone.guru

  db:
    image: mysql:5.7
    container_name: keystone.guru-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    ports:
      - "34006:3306"
    command:
      - '--default-authentication-plugin=mysql_native_password'
    volumes:
      - ./docker-compose/mysql:/var/lib/mysql
      - ./docker-compose/data:/tmp/data
    networks:
      - keystone.guru

  db-combatlog:
    image: mysql:5.7
    container_name: keystone.guru-db-combatlog
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_COMBATLOG_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_COMBATLOG_PASSWORD}
      MYSQL_PASSWORD: ${DB_COMBATLOG_PASSWORD}
      MYSQL_USER: ${DB_COMBATLOG_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    ports:
      - "34007:3306"
    command:
      - '--default-authentication-plugin=mysql_native_password'
    volumes:
      - ./docker-compose/mysql-combatlog:/var/lib/mysql
      - ./docker-compose/data:/tmp/data
    networks:
      - keystone.guru

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5.2.2
    restart: always
    depends_on:
      - db
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "34016:80"
    networks:
      - keystone.guru

  phpmyadmin-combatlog:
    image: phpmyadmin/phpmyadmin:5.2.2
    restart: always
    depends_on:
      - db-combatlog
    environment:
      PMA_HOST: db-combatlog
      MYSQL_ROOT_PASSWORD: ${DB_COMBATLOG_PASSWORD}
    ports:
      - "34017:80"
    networks:
      - keystone.guru

  nginx:
    image: nginx:alpine
    container_name: keystone.guru-nginx
    restart: unless-stopped
    depends_on:
      # It complains about php-fpm not being there if this is not running first
      - app
      - app-swoole
      - laravel-echo-server
#      - php-deployer
    ports:
      - "8008:80"
    volumes:
      - ./:/var/www
      - ./docker-compose/nginx:/etc/nginx/conf.d/
    networks:
      - keystone.guru

  redis:
    image: redis:alpine
    container_name: keystone.guru-redis
    command: --port 6380
    ports:
      - "6380:6380"
    volumes:
      - ./docker-compose/redis-data:/var/lib/redis
    networks:
      - keystone.guru

  php-redis-admin:
    image: erikdubbelboer/phpredisadmin
    container_name: keystone.guru-php-redis-admin
    depends_on:
      - redis
    ports:
      - "6381:80"
    environment:
      - REDIS_1_HOST=redis
      - REDIS_1_name="Keystone.guru Redis"
      - REDIS_1_PORT=6380
    networks:
      - keystone.guru

#  php-deployer:
#    build:
#      context: docker-compose/php-deployer
#      dockerfile: Dockerfile
#    image: keystone.guru-php-deployer
#    container_name: keystone.guru-php-deployer
#    depends_on:
#      - db
#      - db-combatlog
#      - redis
#    restart: no
#    working_dir: /var/www/
#    volumes:
#      - ./:/var/www
#    networks:
#      - keystone.guru
#    secrets:
#      - deployer_ssh_key

  # https://opensearch.org/docs/latest/install-and-configure/install-opensearch/docker/#sample-docker-composeyml
  opensearch-node1:
    image: opensearchproject/opensearch:2.13.0
    container_name: keystone.guru-opensearch-node1
    environment:
      - cluster.name=keystone.guru-opensearch-cluster
      - node.name=keystone.guru-opensearch-node1
      - discovery.seed_hosts=keystone.guru-opensearch-node1,keystone.guru-opensearch-node2
      - cluster.initial_cluster_manager_nodes=keystone.guru-opensearch-node1,keystone.guru-opensearch-node2
      - bootstrap.memory_lock=true
      - http.port=9201
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9201:9201 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - keystone.guru

  opensearch-node2:
    image: opensearchproject/opensearch:2.13.0
    container_name: keystone.guru-opensearch-node2
    environment:
      - cluster.name=keystone.guru-opensearch-cluster
      - node.name=keystone.guru-opensearch-node2
      - discovery.seed_hosts=keystone.guru-opensearch-node1,keystone.guru-opensearch-node2
      - cluster.initial_cluster_manager_nodes=keystone.guru-opensearch-node1,keystone.guru-opensearch-node2
      - bootstrap.memory_lock=true
      - http.port=9201
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    networks:
      - keystone.guru

  opensearch-dashboards:
    build:
      context: docker-compose/opensearch-dashboards
      dockerfile: Dockerfile
    image: keystone.guru-opensearch-dashboards
    container_name: keystone.guru-opensearch-dashboards
    ports:
      - 5602:5601 # Map host port 5601 to container port 5601
    expose:
      - "5602" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      - 'OPENSEARCH_HOSTS: ["https://keystone.guru-opensearch-node1:9201","https://keystone.guru-opensearch-node2:9201"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    #    volumes:
    #      - /docker-compose/opensearch/opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
    networks:
      - keystone.guru

  influxdb:
    image: influxdb:1.8.10
    container_name: keystone.guru-influxdb
    ports:
      - "8096:8086" # 8086 is default port - but I moved it to avoid conflicts
    volumes:
      - influxdb-data:/var/lib/influxdb
    environment:
      - INFLUXDB_DB=local                     # Creates a default database named 'local'
      - INFLUXDB_ADMIN_USER=admin             # Sets up an admin user (requires `INFLUXDB_ADMIN_PASSWORD`)
      - INFLUXDB_ADMIN_PASSWORD=admin123      # Admin password
    restart: unless-stopped
    networks:
      - keystone.guru

  grafana:
    image: grafana/grafana:9.5.19-ubuntu
    container_name: keystone.guru-grafana
    ports:
      - "3001:3000" # 3000 is default port - but I moved it to avoid conflicts
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker-compose/grafana/provisioning:/etc/grafana/provisioning    # Mount provisioning directory
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    depends_on:
      - influxdb
    networks:
      - keystone.guru


volumes:
  opensearch-data1:
  opensearch-data2:
  influxdb-data:
  grafana-data:

#secrets:
#  deployer_ssh_key:
#    file: ~/.ssh/php-deployer

networks:
  keystone.guru:
    driver: bridge
