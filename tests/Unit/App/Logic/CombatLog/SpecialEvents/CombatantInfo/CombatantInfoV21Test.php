<?php

namespace App\Logic\CombatLog\SpecialEvents\CombatantInfo;

use App\Logic\CombatLog\CombatLogEntry;
use App\Logic\CombatLog\SpecialEvents\CombatantInfo\Versions\V21\CombatantInfoV21;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\Attributes\Group;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCases\PublicTestCase;

class CombatantInfoV21Test extends PublicTestCase
{
    #[Test]
    #[Group('CombatLog')]
    #[Group('CombatantInfo')]
    #[DataProvider('parseEvent_GivenCombatantInfoEvent_ShouldValidateBasicStats_DataProvider')]
    public function parseEvent_GivenCombatantInfoEvent_ShouldValidateBasicStats(
        string $combatantInfoEvent,
        string $expectedPlayerGuid,
        int    $expectedFaction,
        int    $expectedStrength,
        int    $expectedAgility,
        int    $expectedStamina,
        int    $expectedIntellect,
        int    $expectedDodge,
        int    $expectedParry,
        int    $expectedBlock,
        int    $expectedCritMelee,
        int    $expectedCritRanged,
        int    $expectedCritSpell,
        int    $expectedSpeed,
        int    $expectedLifesteal,
        int    $expectedHasteMelee,
        int    $expectedHasteRanged,
        int    $expectedHasteSpell,
        int    $expectedAvoidance,
        int    $expectedMastery,
        int    $expectedVersatilityDamageDone,
        int    $expectedVersatilityHealingDone,
        int    $expectedVersatilityDamageTaken,
        int    $expectedArmor,
        int    $expectedCurrentSpecId,
        int    $expectedHonorLevel,
        int    $expectedSeason,
        int    $expectedRating,
        int    $expectedTier
    ): void {
        // Arrange
        $combatLogEntry = new CombatLogEntry($combatantInfoEvent);

        // Act
        /** @var CombatantInfoV21 $parseEventResult */
        $parseEventResult = $combatLogEntry->parseEvent();

        // Assert
        Assert::assertInstanceOf(CombatantInfoV21::class, $combatLogEntry->getParsedEvent());
        Assert::assertEquals($expectedPlayerGuid, $parseEventResult->getPlayerGuid());
        Assert::assertEquals($expectedFaction, $parseEventResult->getFaction());
        Assert::assertEquals($expectedStrength, $parseEventResult->getStrength());
        Assert::assertEquals($expectedAgility, $parseEventResult->getAgility());
        Assert::assertEquals($expectedStamina, $parseEventResult->getStamina());
        Assert::assertEquals($expectedIntellect, $parseEventResult->getIntellect());
        Assert::assertEquals($expectedDodge, $parseEventResult->getDodge());
        Assert::assertEquals($expectedParry, $parseEventResult->getParry());
        Assert::assertEquals($expectedBlock, $parseEventResult->getBlock());
        Assert::assertEquals($expectedCritMelee, $parseEventResult->getCritMelee());
        Assert::assertEquals($expectedCritRanged, $parseEventResult->getCritRanged());
        Assert::assertEquals($expectedCritSpell, $parseEventResult->getCritSpell());
        Assert::assertEquals($expectedSpeed, $parseEventResult->getSpeed());
        Assert::assertEquals($expectedLifesteal, $parseEventResult->getLifesteal());
        Assert::assertEquals($expectedHasteMelee, $parseEventResult->getHasteMelee());
        Assert::assertEquals($expectedHasteRanged, $parseEventResult->getHasteRanged());
        Assert::assertEquals($expectedHasteSpell, $parseEventResult->getHasteSpell());
        Assert::assertEquals($expectedAvoidance, $parseEventResult->getAvoidance());
        Assert::assertEquals($expectedMastery, $parseEventResult->getMastery());
        Assert::assertEquals($expectedVersatilityDamageDone, $parseEventResult->getVersatilityDamageDone());
        Assert::assertEquals($expectedVersatilityHealingDone, $parseEventResult->getVersatilityHealingDone());
        Assert::assertEquals($expectedVersatilityDamageTaken, $parseEventResult->getVersatilityDamageTaken());
        Assert::assertEquals($expectedArmor, $parseEventResult->getArmor());
        Assert::assertEquals($expectedCurrentSpecId, $parseEventResult->getCurrentSpecId());
        Assert::assertEquals($expectedHonorLevel, $parseEventResult->getHonorLevel());
        Assert::assertEquals($expectedSeason, $parseEventResult->getSeason());
        Assert::assertEquals($expectedRating, $parseEventResult->getRating());
        Assert::assertEquals($expectedTier, $parseEventResult->getTier());
    }

    public static function parseEvent_GivenCombatantInfoEvent_ShouldValidateBasicStats_DataProvider(): array
    {
        return [
            [
                '10/18/2024 21:34:24.8572  COMBATANT_INFO,Player-1084-0A6C4CFA,0,10762,50834,258297,14907,0,0,0,6010,6010,6010,1100,0,13648,13648,13648,0,6368,9490,9490,9490,31965,253,[(94957,117554,1),(94960,117557,1),(94961,117558,1),(94968,117565,1),(94974,117571,1),(94982,117579,1),(94983,117580,1),(94986,117583,1),(94993,117590,1),(99832,123348,1),(94959,123779,1),(102292,126352,1),(102336,126397,1),(102337,126398,1),(102339,126401,1),(102340,126402,1),(102343,126405,1),(102346,126408,1),(102347,126409,1),(102349,126411,1),(102352,126414,1),(102353,126415,1),(102354,126416,1),(102357,126419,1),(102358,126420,1),(102361,126423,1),(102364,126426,2),(102365,126427,1),(102367,126430,2),(102368,126431,1),(102369,126432,1),(102373,126436,1),(102374,126437,1),(102376,126439,1),(102377,126440,1),(102381,126444,1),(102384,126447,1),(102386,126449,1),(102387,126450,1),(102388,126451,1),(102390,126453,1),(102391,126454,1),(102392,126456,1),(102393,126457,1),(102395,126459,1),(102396,126460,2),(102397,126461,1),(102400,126464,1),(102401,126465,1),(102404,126468,1),(102406,126470,1),(102408,126472,1),(102409,126473,2),(102411,126475,1),(102416,126481,1),(102417,126482,1),(102420,126485,1),(102422,126488,1),(102423,126489,1),(102378,126441,1),(94987,117584,1),(102371,126434,1),(102375,126438,1),(102410,126474,1),(102426,126492,1),(102739,126829,1),(102345,126407,1),(102359,126421,2),(102380,126443,1)],(0,0,0,0),[(211024,606,(),(6652,10877,10377,10270,3185,10255),()),(219184,606,(),(6652,10394,10879,10270,3185,10255),(213478,595,213478,595)),(212018,610,(),(6652,10369,10269,1511,10255),()),(2577,1,(),(),()),(212023,610,(7363,0,0),(10373,6652,10269,1511,10255),()),(219160,616,(),(10263,6652,10876,10377,3195,10255),()),(212019,610,(7601,0,0),(6652,10370,10269,1511,10255),()),(219165,606,(7424,0,0),(6652,10377,10270,3185,10255),()),(219159,606,(7396,0,0),(6652,10877,10377,10270,3185,10255),()),(212021,610,(),(6652,10372,10269,1511,10255),()),(219188,616,(7331,0,0),(10263,6652,3195,10255,10394,10879),(213746,610,213479,610)),(212447,610,(7334,0,0),(6652,10355,10265,1511,10255,10395,10879),(213479,610,213455,610)),(215178,606,(),(6652,10270,3285,10255),()),(225649,606,(),(6652,10270,3135,10255),()),(211006,606,(7415,0,0),(6652,10377,10270,1511,10255),()),(212400,610,(7459,7494,0),(6652,10354,10269,1511,10255),()),(0,0,(),(),()),(198731,1,(),(),())],[Player-1084-0A6C4CFA,462513,Player-1084-0A912E3E,166646,Player-1084-0AD6D1CD,21562,Player-1084-0A5FC4F3,1126,Player-1084-0A6C4CFA,432021,Player-1084-0A6C4CFA,461857,Player-1084-0A5F83A7,6673,Player-1084-0AF6E8C3,465,Player-1084-0A5F088F,1459,Player-1084-0A5F3C15,462854],15,0,0,0',
                'Player-1084-0A6C4CFA',
                0,
                10762,
                50834,
                258297,
                14907,
                0,
                0,
                0,
                6010,
                6010,
                6010,
                1100,
                0,
                13648,
                13648,
                13648,
                0,
                6368,
                9490,
                9490,
                9490,
                31965,
                253,
                15,
                0,
                0,
                0,
            ],
        ];
    }

    #[Test]
    #[Group('CombatLog')]
    #[Group('CombatantInfo')]
    #[DataProvider('parseEvent_GivenCombatantInfoEvent_ShouldValidateTalents_DataProvider')]
    public function parseEvent_GivenCombatantInfoEvent_ShouldValidateTalents(
        string $combatantInfoEvent,
        array  $expectedTalents
    ): void {
        // Arrange
        $combatLogEntry = new CombatLogEntry($combatantInfoEvent);

        // Act
        /** @var CombatantInfoV21 $parseEventResult */
        $parseEventResult = $combatLogEntry->parseEvent();

        // Assert
        Assert::assertInstanceOf(CombatantInfoV21::class, $combatLogEntry->getParsedEvent());
        Assert::assertEquals($expectedTalents, $parseEventResult->getTalents());
    }

    public static function parseEvent_GivenCombatantInfoEvent_ShouldValidateTalents_DataProvider(): array
    {
        return [
            [
                '10/18/2024 21:34:24.8572  COMBATANT_INFO,Player-1084-0A6C4CFA,0,10762,50834,258297,14907,0,0,0,6010,6010,6010,1100,0,13648,13648,13648,0,6368,9490,9490,9490,31965,253,[(94957,117554,1),(94960,117557,1),(94961,117558,1),(94968,117565,1),(94974,117571,1),(94982,117579,1),(94983,117580,1),(94986,117583,1),(94993,117590,1),(99832,123348,1),(94959,123779,1),(102292,126352,1),(102336,126397,1),(102337,126398,1),(102339,126401,1),(102340,126402,1),(102343,126405,1),(102346,126408,1),(102347,126409,1),(102349,126411,1),(102352,126414,1),(102353,126415,1),(102354,126416,1),(102357,126419,1),(102358,126420,1),(102361,126423,1),(102364,126426,2),(102365,126427,1),(102367,126430,2),(102368,126431,1),(102369,126432,1),(102373,126436,1),(102374,126437,1),(102376,126439,1),(102377,126440,1),(102381,126444,1),(102384,126447,1),(102386,126449,1),(102387,126450,1),(102388,126451,1),(102390,126453,1),(102391,126454,1),(102392,126456,1),(102393,126457,1),(102395,126459,1),(102396,126460,2),(102397,126461,1),(102400,126464,1),(102401,126465,1),(102404,126468,1),(102406,126470,1),(102408,126472,1),(102409,126473,2),(102411,126475,1),(102416,126481,1),(102417,126482,1),(102420,126485,1),(102422,126488,1),(102423,126489,1),(102378,126441,1),(94987,117584,1),(102371,126434,1),(102375,126438,1),(102410,126474,1),(102426,126492,1),(102739,126829,1),(102345,126407,1),(102359,126421,2),(102380,126443,1)],(0,0,0,0),[(211024,606,(),(6652,10877,10377,10270,3185,10255),()),(219184,606,(),(6652,10394,10879,10270,3185,10255),(213478,595,213478,595)),(212018,610,(),(6652,10369,10269,1511,10255),()),(2577,1,(),(),()),(212023,610,(7363,0,0),(10373,6652,10269,1511,10255),()),(219160,616,(),(10263,6652,10876,10377,3195,10255),()),(212019,610,(7601,0,0),(6652,10370,10269,1511,10255),()),(219165,606,(7424,0,0),(6652,10377,10270,3185,10255),()),(219159,606,(7396,0,0),(6652,10877,10377,10270,3185,10255),()),(212021,610,(),(6652,10372,10269,1511,10255),()),(219188,616,(7331,0,0),(10263,6652,3195,10255,10394,10879),(213746,610,213479,610)),(212447,610,(7334,0,0),(6652,10355,10265,1511,10255,10395,10879),(213479,610,213455,610)),(215178,606,(),(6652,10270,3285,10255),()),(225649,606,(),(6652,10270,3135,10255),()),(211006,606,(7415,0,0),(6652,10377,10270,1511,10255),()),(212400,610,(7459,7494,0),(6652,10354,10269,1511,10255),()),(0,0,(),(),()),(198731,1,(),(),())],[Player-1084-0A6C4CFA,462513,Player-1084-0A912E3E,166646,Player-1084-0AD6D1CD,21562,Player-1084-0A5FC4F3,1126,Player-1084-0A6C4CFA,432021,Player-1084-0A6C4CFA,461857,Player-1084-0A5F83A7,6673,Player-1084-0AF6E8C3,465,Player-1084-0A5F088F,1459,Player-1084-0A5F3C15,462854],15,0,0,0',
                [
                    [94957, 117554, 1],
                    [94960, 117557, 1],
                    [94961, 117558, 1],
                    [94968, 117565, 1],
                    [94974, 117571, 1],
                    [94982, 117579, 1],
                    [94983, 117580, 1],
                    [94986, 117583, 1],
                    [94993, 117590, 1],
                    [99832, 123348, 1],
                    [94959, 123779, 1],
                    [102292, 126352, 1],
                    [102336, 126397, 1],
                    [102337, 126398, 1],
                    [102339, 126401, 1],
                    [102340, 126402, 1],
                    [102343, 126405, 1],
                    [102346, 126408, 1],
                    [102347, 126409, 1],
                    [102349, 126411, 1],
                    [102352, 126414, 1],
                    [102353, 126415, 1],
                    [102354, 126416, 1],
                    [102357, 126419, 1],
                    [102358, 126420, 1],
                    [102361, 126423, 1],
                    [102364, 126426, 2],
                    [102365, 126427, 1],
                    [102367, 126430, 2],
                    [102368, 126431, 1],
                    [102369, 126432, 1],
                    [102373, 126436, 1],
                    [102374, 126437, 1],
                    [102376, 126439, 1],
                    [102377, 126440, 1],
                    [102381, 126444, 1],
                    [102384, 126447, 1],
                    [102386, 126449, 1],
                    [102387, 126450, 1],
                    [102388, 126451, 1],
                    [102390, 126453, 1],
                    [102391, 126454, 1],
                    [102392, 126456, 1],
                    [102393, 126457, 1],
                    [102395, 126459, 1],
                    [102396, 126460, 2],
                    [102397, 126461, 1],
                    [102400, 126464, 1],
                    [102401, 126465, 1],
                    [102404, 126468, 1],
                    [102406, 126470, 1],
                    [102408, 126472, 1],
                    [102409, 126473, 2],
                    [102411, 126475, 1],
                    [102416, 126481, 1],
                    [102417, 126482, 1],
                    [102420, 126485, 1],
                    [102422, 126488, 1],
                    [102423, 126489, 1],
                    [102378, 126441, 1],
                    [94987, 117584, 1],
                    [102371, 126434, 1],
                    [102375, 126438, 1],
                    [102410, 126474, 1],
                    [102426, 126492, 1],
                    [102739, 126829, 1],
                    [102345, 126407, 1],
                    [102359, 126421, 2],
                    [102380, 126443, 1],
                ],
            ],
        ];
    }


    #[Test]
    #[Group('CombatLog')]
    #[Group('CombatantInfo')]
    #[DataProvider('parseEvent_GivenCombatantInfoEvent_ShouldValidatePvpTalents_DataProvider')]
    public function parseEvent_GivenCombatantInfoEvent_ShouldValidatePvpTalents(
        string $combatantInfoEvent,
        array  $expectedTalents
    ): void {
        // Arrange
        $combatLogEntry = new CombatLogEntry($combatantInfoEvent);

        // Act
        /** @var CombatantInfoV21 $parseEventResult */
        $parseEventResult = $combatLogEntry->parseEvent();

        // Assert
        Assert::assertInstanceOf(CombatantInfoV21::class, $combatLogEntry->getParsedEvent());
        Assert::assertEquals($expectedTalents, $parseEventResult->getPvpTalents());
    }

    public static function parseEvent_GivenCombatantInfoEvent_ShouldValidatePvpTalents_DataProvider(): array
    {
        return [
            [
                '10/18/2024 21:34:24.8572  COMBATANT_INFO,Player-1084-0A6C4CFA,0,10762,50834,258297,14907,0,0,0,6010,6010,6010,1100,0,13648,13648,13648,0,6368,9490,9490,9490,31965,253,[(94957,117554,1),(94960,117557,1),(94961,117558,1),(94968,117565,1),(94974,117571,1),(94982,117579,1),(94983,117580,1),(94986,117583,1),(94993,117590,1),(99832,123348,1),(94959,123779,1),(102292,126352,1),(102336,126397,1),(102337,126398,1),(102339,126401,1),(102340,126402,1),(102343,126405,1),(102346,126408,1),(102347,126409,1),(102349,126411,1),(102352,126414,1),(102353,126415,1),(102354,126416,1),(102357,126419,1),(102358,126420,1),(102361,126423,1),(102364,126426,2),(102365,126427,1),(102367,126430,2),(102368,126431,1),(102369,126432,1),(102373,126436,1),(102374,126437,1),(102376,126439,1),(102377,126440,1),(102381,126444,1),(102384,126447,1),(102386,126449,1),(102387,126450,1),(102388,126451,1),(102390,126453,1),(102391,126454,1),(102392,126456,1),(102393,126457,1),(102395,126459,1),(102396,126460,2),(102397,126461,1),(102400,126464,1),(102401,126465,1),(102404,126468,1),(102406,126470,1),(102408,126472,1),(102409,126473,2),(102411,126475,1),(102416,126481,1),(102417,126482,1),(102420,126485,1),(102422,126488,1),(102423,126489,1),(102378,126441,1),(94987,117584,1),(102371,126434,1),(102375,126438,1),(102410,126474,1),(102426,126492,1),(102739,126829,1),(102345,126407,1),(102359,126421,2),(102380,126443,1)],(0,0,0,0),[(211024,606,(),(6652,10877,10377,10270,3185,10255),()),(219184,606,(),(6652,10394,10879,10270,3185,10255),(213478,595,213478,595)),(212018,610,(),(6652,10369,10269,1511,10255),()),(2577,1,(),(),()),(212023,610,(7363,0,0),(10373,6652,10269,1511,10255),()),(219160,616,(),(10263,6652,10876,10377,3195,10255),()),(212019,610,(7601,0,0),(6652,10370,10269,1511,10255),()),(219165,606,(7424,0,0),(6652,10377,10270,3185,10255),()),(219159,606,(7396,0,0),(6652,10877,10377,10270,3185,10255),()),(212021,610,(),(6652,10372,10269,1511,10255),()),(219188,616,(7331,0,0),(10263,6652,3195,10255,10394,10879),(213746,610,213479,610)),(212447,610,(7334,0,0),(6652,10355,10265,1511,10255,10395,10879),(213479,610,213455,610)),(215178,606,(),(6652,10270,3285,10255),()),(225649,606,(),(6652,10270,3135,10255),()),(211006,606,(7415,0,0),(6652,10377,10270,1511,10255),()),(212400,610,(7459,7494,0),(6652,10354,10269,1511,10255),()),(0,0,(),(),()),(198731,1,(),(),())],[Player-1084-0A6C4CFA,462513,Player-1084-0A912E3E,166646,Player-1084-0AD6D1CD,21562,Player-1084-0A5FC4F3,1126,Player-1084-0A6C4CFA,432021,Player-1084-0A6C4CFA,461857,Player-1084-0A5F83A7,6673,Player-1084-0AF6E8C3,465,Player-1084-0A5F088F,1459,Player-1084-0A5F3C15,462854],15,0,0,0',
                [
                    0, 0, 0, 0,
                ],
            ],
        ];
    }


    #[Test]
    #[Group('CombatLog')]
    #[Group('CombatantInfo')]
    #[DataProvider('parseEvent_GivenCombatantInfoEvent_ShouldValidateEquippedItems_DataProvider')]
    public function parseEvent_GivenCombatantInfoEvent_ShouldValidateEquippedItems(
        string $combatantInfoEvent,
        array  $expectedEquippedItems
    ): void {
        // Arrange
        $combatLogEntry = new CombatLogEntry($combatantInfoEvent);

        // Act
        /** @var CombatantInfoV21 $parseEventResult */
        $parseEventResult = $combatLogEntry->parseEvent();

        // Assert
        Assert::assertInstanceOf(CombatantInfoV21::class, $combatLogEntry->getParsedEvent());
        Assert::assertEquals($expectedEquippedItems, $parseEventResult->getEquippedItems());
    }

    public static function parseEvent_GivenCombatantInfoEvent_ShouldValidateEquippedItems_DataProvider(): array
    {
        return [
            [
                '10/18/2024 21:34:24.8572  COMBATANT_INFO,Player-1084-0A6C4CFA,0,10762,50834,258297,14907,0,0,0,6010,6010,6010,1100,0,13648,13648,13648,0,6368,9490,9490,9490,31965,253,[(94957,117554,1),(94960,117557,1),(94961,117558,1),(94968,117565,1),(94974,117571,1),(94982,117579,1),(94983,117580,1),(94986,117583,1),(94993,117590,1),(99832,123348,1),(94959,123779,1),(102292,126352,1),(102336,126397,1),(102337,126398,1),(102339,126401,1),(102340,126402,1),(102343,126405,1),(102346,126408,1),(102347,126409,1),(102349,126411,1),(102352,126414,1),(102353,126415,1),(102354,126416,1),(102357,126419,1),(102358,126420,1),(102361,126423,1),(102364,126426,2),(102365,126427,1),(102367,126430,2),(102368,126431,1),(102369,126432,1),(102373,126436,1),(102374,126437,1),(102376,126439,1),(102377,126440,1),(102381,126444,1),(102384,126447,1),(102386,126449,1),(102387,126450,1),(102388,126451,1),(102390,126453,1),(102391,126454,1),(102392,126456,1),(102393,126457,1),(102395,126459,1),(102396,126460,2),(102397,126461,1),(102400,126464,1),(102401,126465,1),(102404,126468,1),(102406,126470,1),(102408,126472,1),(102409,126473,2),(102411,126475,1),(102416,126481,1),(102417,126482,1),(102420,126485,1),(102422,126488,1),(102423,126489,1),(102378,126441,1),(94987,117584,1),(102371,126434,1),(102375,126438,1),(102410,126474,1),(102426,126492,1),(102739,126829,1),(102345,126407,1),(102359,126421,2),(102380,126443,1)],(0,0,0,0),[(211024,606,(),(6652,10877,10377,10270,3185,10255),()),(219184,606,(),(6652,10394,10879,10270,3185,10255),(213478,595,213478,595)),(212018,610,(),(6652,10369,10269,1511,10255),()),(2577,1,(),(),()),(212023,610,(7363,0,0),(10373,6652,10269,1511,10255),()),(219160,616,(),(10263,6652,10876,10377,3195,10255),()),(212019,610,(7601,0,0),(6652,10370,10269,1511,10255),()),(219165,606,(7424,0,0),(6652,10377,10270,3185,10255),()),(219159,606,(7396,0,0),(6652,10877,10377,10270,3185,10255),()),(212021,610,(),(6652,10372,10269,1511,10255),()),(219188,616,(7331,0,0),(10263,6652,3195,10255,10394,10879),(213746,610,213479,610)),(212447,610,(7334,0,0),(6652,10355,10265,1511,10255,10395,10879),(213479,610,213455,610)),(215178,606,(),(6652,10270,3285,10255),()),(225649,606,(),(6652,10270,3135,10255),()),(211006,606,(7415,0,0),(6652,10377,10270,1511,10255),()),(212400,610,(7459,7494,0),(6652,10354,10269,1511,10255),()),(0,0,(),(),()),(198731,1,(),(),())],[Player-1084-0A6C4CFA,462513,Player-1084-0A912E3E,166646,Player-1084-0AD6D1CD,21562,Player-1084-0A5FC4F3,1126,Player-1084-0A6C4CFA,432021,Player-1084-0A6C4CFA,461857,Player-1084-0A5F83A7,6673,Player-1084-0AF6E8C3,465,Player-1084-0A5F088F,1459,Player-1084-0A5F3C15,462854],15,0,0,0',
                [
                    [211024, 606, [], [6652, 10877, 10377, 10270, 3185, 10255], []],
                    [219184, 606, [], [6652, 10394, 10879, 10270, 3185, 10255], [213478, 595, 213478, 595]],
                    [212018, 610, [], [6652, 10369, 10269, 1511, 10255], []],
                    [2577, 1, [], [], []],
                    [212023, 610, [7363, 0, 0], [10373, 6652, 10269, 1511, 10255], []],
                    [219160, 616, [], [10263, 6652, 10876, 10377, 3195, 10255], []],
                    [212019, 610, [7601, 0, 0], [6652, 10370, 10269, 1511, 10255], []],
                    [219165, 606, [7424, 0, 0], [6652, 10377, 10270, 3185, 10255], []],
                    [219159, 606, [7396, 0, 0], [6652, 10877, 10377, 10270, 3185, 10255], []],
                    [212021, 610, [], [6652, 10372, 10269, 1511, 10255], []],
                    [219188, 616, [7331, 0, 0], [10263, 6652, 3195, 10255, 10394, 10879], [213746, 610, 213479, 610]],
                    [212447, 610, [7334, 0, 0], [6652, 10355, 10265, 1511, 10255, 10395, 10879], [213479, 610, 213455, 610]],
                    [215178, 606, [], [6652, 10270, 3285, 10255], []],
                    [225649, 606, [], [6652, 10270, 3135, 10255], []],
                    [211006, 606, [7415, 0, 0], [6652, 10377, 10270, 1511, 10255], []],
                    [212400, 610, [7459, 7494, 0], [6652, 10354, 10269, 1511, 10255], []],
                    [0, 0, [], [], []],
                    [198731, 1, [], [], []],
                ],
            ],
        ];
    }


    #[Test]
    #[Group('CombatLog')]
    #[Group('CombatantInfo')]
    #[DataProvider('parseEvent_GivenCombatantInfoEvent_ShouldValidateInterestingAuras_DataProvider')]
    public function parseEvent_GivenCombatantInfoEvent_ShouldValidateInterestingAuras(
        string $combatantInfoEvent,
        array  $expectedInterestingAuras
    ): void {
        // Arrange
        $combatLogEntry = new CombatLogEntry($combatantInfoEvent);

        // Act
        /** @var CombatantInfoV21 $parseEventResult */
        $parseEventResult = $combatLogEntry->parseEvent();

        // Assert
        Assert::assertInstanceOf(CombatantInfoV21::class, $combatLogEntry->getParsedEvent());
        Assert::assertEquals($expectedInterestingAuras, $parseEventResult->getInterestingAuras());
    }

    public static function parseEvent_GivenCombatantInfoEvent_ShouldValidateInterestingAuras_DataProvider(): array
    {
        return [
            [
                '10/18/2024 21:34:24.8572  COMBATANT_INFO,Player-1084-0A6C4CFA,0,10762,50834,258297,14907,0,0,0,6010,6010,6010,1100,0,13648,13648,13648,0,6368,9490,9490,9490,31965,253,[(94957,117554,1),(94960,117557,1),(94961,117558,1),(94968,117565,1),(94974,117571,1),(94982,117579,1),(94983,117580,1),(94986,117583,1),(94993,117590,1),(99832,123348,1),(94959,123779,1),(102292,126352,1),(102336,126397,1),(102337,126398,1),(102339,126401,1),(102340,126402,1),(102343,126405,1),(102346,126408,1),(102347,126409,1),(102349,126411,1),(102352,126414,1),(102353,126415,1),(102354,126416,1),(102357,126419,1),(102358,126420,1),(102361,126423,1),(102364,126426,2),(102365,126427,1),(102367,126430,2),(102368,126431,1),(102369,126432,1),(102373,126436,1),(102374,126437,1),(102376,126439,1),(102377,126440,1),(102381,126444,1),(102384,126447,1),(102386,126449,1),(102387,126450,1),(102388,126451,1),(102390,126453,1),(102391,126454,1),(102392,126456,1),(102393,126457,1),(102395,126459,1),(102396,126460,2),(102397,126461,1),(102400,126464,1),(102401,126465,1),(102404,126468,1),(102406,126470,1),(102408,126472,1),(102409,126473,2),(102411,126475,1),(102416,126481,1),(102417,126482,1),(102420,126485,1),(102422,126488,1),(102423,126489,1),(102378,126441,1),(94987,117584,1),(102371,126434,1),(102375,126438,1),(102410,126474,1),(102426,126492,1),(102739,126829,1),(102345,126407,1),(102359,126421,2),(102380,126443,1)],(0,0,0,0),[(211024,606,(),(6652,10877,10377,10270,3185,10255),()),(219184,606,(),(6652,10394,10879,10270,3185,10255),(213478,595,213478,595)),(212018,610,(),(6652,10369,10269,1511,10255),()),(2577,1,(),(),()),(212023,610,(7363,0,0),(10373,6652,10269,1511,10255),()),(219160,616,(),(10263,6652,10876,10377,3195,10255),()),(212019,610,(7601,0,0),(6652,10370,10269,1511,10255),()),(219165,606,(7424,0,0),(6652,10377,10270,3185,10255),()),(219159,606,(7396,0,0),(6652,10877,10377,10270,3185,10255),()),(212021,610,(),(6652,10372,10269,1511,10255),()),(219188,616,(7331,0,0),(10263,6652,3195,10255,10394,10879),(213746,610,213479,610)),(212447,610,(7334,0,0),(6652,10355,10265,1511,10255,10395,10879),(213479,610,213455,610)),(215178,606,(),(6652,10270,3285,10255),()),(225649,606,(),(6652,10270,3135,10255),()),(211006,606,(7415,0,0),(6652,10377,10270,1511,10255),()),(212400,610,(7459,7494,0),(6652,10354,10269,1511,10255),()),(0,0,(),(),()),(198731,1,(),(),())],[Player-1084-0A6C4CFA,462513,Player-1084-0A912E3E,166646,Player-1084-0AD6D1CD,21562,Player-1084-0A5FC4F3,1126,Player-1084-0A6C4CFA,432021,Player-1084-0A6C4CFA,461857,Player-1084-0A5F83A7,6673,Player-1084-0AF6E8C3,465,Player-1084-0A5F088F,1459,Player-1084-0A5F3C15,462854],15,0,0,0',
                [
                    'Player-1084-0A6C4CFA',
                    462513,
                    'Player-1084-0A912E3E',
                    166646,
                    'Player-1084-0AD6D1CD',
                    21562,
                    'Player-1084-0A5FC4F3',
                    1126,
                    'Player-1084-0A6C4CFA',
                    432021,
                    'Player-1084-0A6C4CFA',
                    461857,
                    'Player-1084-0A5F83A7',
                    6673,
                    'Player-1084-0AF6E8C3',
                    465,
                    'Player-1084-0A5F088F',
                    1459,
                    'Player-1084-0A5F3C15',
                    462854,
                ],

            ],
        ];
    }

}
